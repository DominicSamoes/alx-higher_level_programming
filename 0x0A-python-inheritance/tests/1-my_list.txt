The ``1-my_list`` module
***************************************************

Using ``MyList``
---------------------

Importing function from the module:
    >>> MyList = __import__('1-my_list').MyList

Printing a sorted list (with repeated numbers)
    >>> my_list = MyList()
    >>> my_list.append(10)
    >>> my_list += [11]
    >>> my_list.append(33)
    >>> my_list.append(33)
    >>> my_list += [33]
    >>> my_list.print_sorted()
    [10, 11, 33, 33, 33]

Printing a sorted list with one element (one number)
    >>> my_list = MyList()
    >>> my_list += [100]
    >>> my_list.print_sorted()
    [100]

Printing a sorted list with elements > 0 (positive numbers)
    >>> my_list = MyList()
    >>> my_list += [10]
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> my_list.append(50)
    >>> my_list.append(32)
    >>> my_list.append(5)
    >>> my_list.print_sorted()
    [3, 5, 5, 10, 32, 50]

Printing a sorted list with elements < 0 (negative numbers)
    >>> my_list = MyList()
    >>> my_list += [-10]
    >>> my_list.append(-3)
    >>> my_list.append(-5)
    >>> my_list.append(-50)
    >>> my_list.append(-32)
    >>> my_list.append(-5)
    >>> my_list.print_sorted()
    [-50, -32, -10, -5, -5, -3]

Printing a sorted list with elements > 0 and <= 0 (mixed numbers)
    >>> my_list = MyList()
    >>> my_list += [10]
    >>> my_list.append(-3)
    >>> my_list.append(5)
    >>> my_list.append(0)
    >>> my_list.append(32)
    >>> my_list.append(-5)
    >>> my_list.print_sorted()
    [-5, -3, 0, 5, 10, 32]

Printing an empty list
    >>> my_list = MyList()
    >>> my_list.print_sorted()
    []


MyList is an instance of the class list
    >>> my_list = MyList()
    >>> isinstance(my_list, list)
    True


Instance has the correct type
    >>> my_list = MyList()
    >>> type(my_list) == MyList
    True


MyList is a subclass of list
    >>> issubclass(MyList, list)
    True


Print_sorted method with 1 passed argument
    >>> my_list = MyList()
    >>> my_list.print_sorted([1, 2, 3])
    Traceback (most recent call last):
    	      ...
    TypeError: print_sorted() takes 1 positional argument but 2 were given


Print_sorted method with 2 passed arguments
    >>> my_list = MyList()
    >>> my_list.print_sorted([1, 2], [5, 4])
    Traceback (most recent call last):
    	      ...
    TypeError: print_sorted() takes 1 positional argument but 3 were given


Type of the print_sorted method
    >>> my_list = MyList()
    >>> type(my_list.print_sorted)
    <class 'method'>


Check printable string
    >>> my_list = MyList()
    >>> my_list.append(5)
    >>> print(my_list)
    [5]

Check if print_sorted() returns a new list
    >>> my_list = MyList()
    >>> my_list.append(7)
    >>> my_list.append(1)
    >>> my_list.append(2)
    >>> my_list.print_sorted()
    [1, 2, 7]
    >>> my_list
    [7, 1, 2]
