===========================
How to Use 0-add_integer.py
===========================

This module defines an integer addition function ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)``` returns the addition of its two arguments. For numbers,
that value is equivalent to using the ``+`` operator.

::
	>> add_integer = __import__('0-add_integer').add_integer
	>> add_integer(4, 88)
	92

::
	>> add_integr(4.0, 88)
	92

::
        >> add_integr(4.0, 88.0)
        92

::
        >> add_integr(-4.0, -88.0)
        - 92

::
        >> add_integr(4)
        102

Non-Integers and Non-Floats
===========================

``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

::
        >> add_integr("Dominic", 4)
        Traceback (most recent call last):
        TypeError: a must be an integer

::
        >> add_integr(4, "Dominic")
        Traceback (most recent call last):
        TypeError: b must be an integer

::
        >> add_integr("Samo", "Dominic")
        Traceback (most recent call last):
        TypeError: a must be an integer


::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer


::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer


::

    >>> add_integer(float('nan'), float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
